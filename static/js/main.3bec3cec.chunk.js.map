{"version":3,"sources":["App.js","game/character/CharacterConsts.js","game/character/CharacterStats.js","game/weapon/Weapon.js","game/team/TeamConsts.js","game/team/Team.js","game/TypeChecker.js","game/character/Character.js","game/generators/Generator.js","display/graphic/ImageManager.js","display/Sleep.js","display/graphic/Animations.js","display/CharacterDisplay.js","display/TeamDisplay.js","display/BattleLogs.js","display/VictoryDisplay.js","display/Prompt.js","display/Board.js","gameScript.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","id","className","React","Component","CharacterConsts","CharacterStats","health","agility","Object","classCallCheck","this","maxHealth","initiative","DefaultInitative","Weapon","power","_this","attack","TeamConsts","Team","insertCharacter","character","Character","TypeError","isCharacter","isFull","Error","team","push","length","TeamMaxLength","getNextToAttack","maxInitiative","ImpossibleInitiative","choosenCharacter","forEach","getInitiative","isDead","increaseAllInitiative","increaseInitiative","getNbAlive","cpt","areNumbers","call","arguments","element","getMaxHealth","stats","getHealth","getAgility","getPower","weapon","DefaultPower","equipWeapon","isWeapon","unequipWeapon","resetInitiative","hasAWeapon","block","amount","MinimumHealth","toString","LimitInitiative","charString","MaximumInitiative","MinStat","MaxStat","MaxWeapon","MaxTeamLength","randomCharacterGenerator","getRandomInteger","randomTeamGenerator","i","min","max","Math","floor","random","ImgPath","process","ImgList","images","characters","singleton","randomChoice","freeze","sleep","milliseconds","Promise","resolve","setTimeout","Animations","classList","contains","add","ripImg","ImageManager","getRipImg","setAttribute","remove","save","getAttribute","dmgImg","getDmgImg","NoDamages","CharacterDisplay","props","possibleConstructorReturn","getPrototypeOf","blockDamages","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","animations","dmgAnimation","getImage","fadeOutAnimation","refreshStats","window","gameScript","playTurn","stop","zoomSprite","zoomImage","unzoomSprite","unzoomImage","state","document","getElementById","_callee2","_context2","setState","characterDisplay","enableOnClick","addEventListener","disableOnClick","removeEventListener","spriteUrl","getRandomCharacterImg","image","src","alt","Col","data-testid","TeamDisplay","refreshAllCharacters","characterId","place","baseStr","isPlayer","enableClick","disableClick","unzoomTeam","readyToAttack","maxInit","selected","char","_this2","Row","display_CharacterDisplay","ref","child","BattleLogs","context","open","content","text","innerHTML","appendChild","Button","onClick","aria-controls","aria-axpend","Collapse","in","VictoryDisplay","reloadGame","location","reload","winner","Jumbotron","variant","Prompt","updateText","message","WaitingTime","Board","checkVictory","cpuCount","cpuTeam","userCount","userTeam","div","playerWon","ReactDOM","render","display_VictoryDisplay","isGameOver","atLeastOneCanPlay","currentCharacter","getNextToATtack","refreshTeams","computerAttack","target","cpuTeamRender","userTeamRender","cpu","player","isPlayerTurn","changePrompt","prompt","allowUserPlay","allowCpuPlay","cpuMakeChoice","getAliveTarget","targets","choice","attackText","logs","appendText","click","blockPlayers","Container","fluid","xs","display_BattleLogs","display_TeamDisplay","display_Prompt","GameScript","startGame","renderElements","board","sent","userTurn","computerTurn","display_Board","gameBoard","Boolean","hostname","match","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bec3cec.chunk.js","sourcesContent":["import React from 'react';\nimport './css/App.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div id=\"app\" className='App'>\n                <header className='App-header'>\n                    <p id=\"title-text\">Heroes And Creatures Online</p>\n                </header>\n                <div id=\"board-div\"></div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","class CharacterConsts {\n    static get DefaultInitative() { return 0; }\n    static get DefaultPower() { return 1; }\n    static get MinimumHealth() { return 0; }\n    static get MaximumInitiative() { return 2000; }\n    static get LimitInitiative() { return 1000; }\n}\n\nexport default CharacterConsts;","import CharacterConsts from './CharacterConsts.js'\n\nclass CharacterStats {\n    constructor(health, agility) {\n        this.maxHealth = health;\n        this.health = health;\n        this.agility = agility;\n        this.initiative = CharacterConsts.DefaultInitative;\n    }\n}\n\nexport default CharacterStats;","class Weapon {\n    constructor(power) {\n        this.power = power;\n    }\n\n    attack = () => {\n        return this.power;\n    }\n}\n\nexport default Weapon;","class TeamConsts {\n    static get TeamMaxLength() { return 4; }\n    static get ImpossibleInitiative() { return -1; }\n}\n\nexport default TeamConsts;","import TeamConsts from './TeamConsts';\nimport { isCharacter } from '../TypeChecker';\n\nclass Team {\n    constructor() {\n        this.team = [];\n    }\n\n    insertCharacter = character => {\n        isCharacter(character);\n        if (!this.isFull()) {\n            this.team.push(character);\n        } else {\n            throw new Error('Team is full');\n        }\n    }\n\n    isFull = () => {\n        return this.team.length >= TeamConsts.TeamMaxLength;\n    }\n\n    getNextToAttack = () => {\n        let maxInitiative = TeamConsts.ImpossibleInitiative;\n        let choosenCharacter = null;\n        this.team.forEach(character => {\n            if (character.getInitiative() > maxInitiative && !character.isDead()) {\n                maxInitiative = character.getInitiative();\n                choosenCharacter = character;\n            }\n        });\n        return choosenCharacter;\n    }\n\n    increaseAllInitiative = () => {\n        this.team.forEach(character => {\n            character.increaseInitiative();\n        });\n    }\n\n    getNbAlive = () => {\n        let cpt = 0;\n        this.team.forEach(character => {\n            if (!character.isDead()) {\n                cpt++;\n            }\n        });\n        return cpt;\n    }\n}\n\nexport default Team;\n","import Character from './character/Character';\nimport Weapon from './weapon/Weapon';\nimport Team from './team/Team';\n\nexport function areNumbers() {\n    [].forEach.call(arguments, element => {\n        if (typeof element !== 'number') {\n            throw new TypeError('Not a number');\n        }\n    });\n}\n\nexport function isWeapon(weapon) {\n    if (!(weapon instanceof Weapon)) {\n        throw new TypeError('Not a weapon');\n    }\n}\n\nexport function isCharacter(character) {\n    if (!(character instanceof Character)) {\n        throw new TypeError('Not a character');\n    }\n}\n\nexport function isTeam(team) {\n    if (!(team instanceof Team)){\n        throw new TypeError('Not a team');\n    }\n}\n","import CharacterConsts from './CharacterConsts';\nimport CharacterStats from './CharacterStats';\nimport { areNumbers, isWeapon } from '../TypeChecker';\n\nclass Character {\n    constructor(health, agility) {\n        areNumbers(health, agility);\n        this.stats = new CharacterStats(health, agility);\n        this.weapon = null;\n    }\n\n    getMaxHealth = () => {\n        return this.stats.maxHealth;\n    };\n\n    getHealth = () => {\n        return this.stats.health;\n    };\n\n    getAgility = () => {\n        return this.stats.agility;\n    };\n\n    getInitiative = () => {\n        return this.stats.initiative;\n    };\n\n    getPower = () => {\n        if (!this.weapon) {\n            return CharacterConsts.DefaultPower;\n        } else {\n            return this.weapon.attack();\n        }\n    };\n\n    equipWeapon = weapon => {\n        isWeapon(weapon);\n        this.weapon = weapon;\n    };\n\n    unequipWeapon = () => {\n        this.weapon = null;\n    };\n\n    attack = () => {\n        this.resetInitiative();\n        if (this.hasAWeapon()) {\n            return this.weapon.attack();\n        }\n        return CharacterConsts.DefaultPower;\n    };\n\n    resetInitiative = () => {\n        this.stats.initiative = CharacterConsts.DefaultInitative;\n    };\n\n    hasAWeapon = () => {\n        return this.weapon !== null;\n    };\n\n    block = amount => {\n        areNumbers(amount);\n        this.stats.health -= amount;\n        if (this.stats.health < CharacterConsts.MinimumHealth) {\n            this.stats.health = CharacterConsts.MinimumHealth;\n        }\n    };\n\n    isDead = () => {\n        return this.stats.health <= CharacterConsts.MinimumHealth;\n    };\n\n    increaseInitiative() {\n        this.stats.initiative += this.stats.agility;\n        if (this.stats.initiative > CharacterConsts.MaximumInitiative) {\n            this.stats.initiative = CharacterConsts.MaximumInitiative;\n        }\n    }\n\n    toString = () => {\n        if (!this.isDead()) {\n            let initiative = this.getInitiative();\n            if (initiative > CharacterConsts.LimitInitiative) {\n                initiative = CharacterConsts.LimitInitiative;\n            }\n            let charString = 'Health: ' + this.stats.health;\n            charString += ' Weapon: ' + this.getPower();\n            charString += ' Init: ' + initiative;\n            return charString;\n        }\n        return 'DEAD';\n    };\n}\n\nexport default Character;\n","import Character from '../character/Character';\nimport Weapon from '../weapon/Weapon';\nimport Team from '../team/Team';\n\nconst MinStat = 10;\nconst MaxStat = 100;\nconst MaxWeapon = 40;\nconst MaxTeamLength = 4;\n\nexport function randomCharacterGenerator() {\n    let character = new Character(getRandomInteger(MinStat, MaxStat), getRandomInteger(MinStat, MaxStat));\n    character.equipWeapon(new Weapon(getRandomInteger(MinStat, MaxWeapon)));\n    return character;\n}\n\nexport function randomTeamGenerator() {\n    let team = new Team();\n    for (let i = 0; i < MaxTeamLength; ++i) {\n        team.insertCharacter(randomCharacterGenerator());\n    }\n    return team;\n}\n\nexport function getRandomInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n","import { getRandomInteger } from '../../game/generators/Generator';\nimport images from './Images.json';\n\nconst ImgPath = process.env.PUBLIC_URL + '/images/';\nconst ImgList = images.characters;\nconst RipImg = 'rip.png';\nconst DamagesImg = 'dmg.png';\n\nclass ImageManager {\n    getRandomCharacterImg() {\n        let randomChoice = getRandomInteger(0, ImgList.length);\n        return ImgPath + ImgList[randomChoice];\n    }\n\n    getRipImg() {\n        return ImgPath + RipImg;\n    }\n\n    getDmgImg() {\n        return ImgPath + DamagesImg;\n    }\n}\n\nconst singleton = new ImageManager();\nObject.freeze(singleton);\nexport default singleton;\n","const sleep = milliseconds => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n};\n\nexport default sleep;","import sleep from '../Sleep';\nimport ImageManager from './ImageManager';\nimport '../../css/Character.css';\n\nconst FadeTime = 1000;\nconst DmgTime = 200;\n\nclass Animations {\n    async fadeOutAnimation(element) {\n        if (element) {\n            if (!element.classList.contains('fade')) {\n                element.classList.add('fade');\n            }\n            await sleep(FadeTime);\n            const ripImg = ImageManager.getRipImg();\n            element.setAttribute('src', ripImg);\n            element.classList.remove('fade');\n        }\n    }\n\n    async dmgAnimation(element) {\n        if (element) {\n            const save = element.getAttribute('src');\n            const dmgImg = ImageManager.getDmgImg();\n            element.setAttribute('src', dmgImg);\n            await sleep(DmgTime);\n            element.setAttribute('src', save);\n        }\n    }\n\n    zoomImage(element) {\n        if (element) {\n            if (!element.classList.contains('zoom-effect')) {\n                element.classList.add('zoom-effect');\n            }\n        }\n    }\n\n    unzoomImage(element) {\n        if (element) {\n            if (element.classList.contains('zoom-effect')) {\n                element.classList.remove('zoom-effect');\n            }\n        }\n    }\n}\n\nexport default Animations;\n","import React from 'react';\nimport { Col } from 'react-bootstrap';\nimport ImageManager from './graphic/ImageManager';\nimport Animations from './graphic/Animations';\nimport '../css/Character.css';\n\nconst NoDamages = 0;\n\nclass CharacterDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.animations = new Animations();\n        this.character = props.character;\n        this.block = NoDamages;\n        this.spriteUrl = ImageManager.getRandomCharacterImg();\n        this.state = {\n            characterDisplay: this.character.toString(),\n            id: props.id,\n            image: <img className='character-img' id={props.id + '-img'} src={this.spriteUrl} alt='alive-character' />\n        };\n    }\n\n    blockDamages = async () => {\n        if (!this.character.isDead()) {\n            await this.animations.dmgAnimation(this.getImage());\n            this.character.block(this.block);\n            if (this.character.isDead()) {\n                await this.animations.fadeOutAnimation(this.getImage());\n            }\n            this.refreshStats();\n            window.gameScript.playTurn();\n        }\n    };\n\n    zoomSprite = () => {\n        this.animations.zoomImage(this.getImage());\n    }\n\n    unzoomSprite = () => {\n        this.animations.unzoomImage(this.getImage());\n    }\n\n    getImage = () => {\n        let id = this.state.id + '-img';\n        return document.getElementById(id);\n    };\n\n    increaseInitiative = async () => {\n        this.character.increaseInitiative();\n        this.refreshStats();\n    };\n\n    refreshStats = () => {\n        this.setState({\n            characterDisplay: this.character.toString()\n        });\n    };\n\n    enableOnClick = power => {\n        this.block = power;\n        let element = document.getElementById(this.state.id);\n        element.addEventListener('click', this.blockDamages, false);\n    };\n\n    disableOnClick = () => {\n        this.block = NoDamages;\n        let characterElement = document.getElementById(this.state.id);\n        characterElement.removeEventListener('click', this.blockDamages, false);\n    };\n\n    render() {\n        return (\n            <Col id={this.state.id} data-testid='character-display'>\n                {this.state.image}\n                <br />\n                <p id={this.state.id + '-stats'} className='character-text' data-testid='char-stats'>\n                    {this.state.characterDisplay}\n                </p>\n            </Col>\n        );\n    }\n}\n\nexport default CharacterDisplay;\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\nimport CharacterDisplay from './CharacterDisplay';\n\nconst TeamMaxLength = 4;\n\nclass TeamDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.team = props.team;\n        this.characters = [];\n        this.isPlayer = props.isPlayer;\n    }\n\n    refreshAllCharacters = () => {\n        this.characters.forEach(character => {\n            character.refreshStats();\n        });\n    };\n\n    characterId = place => {\n        let baseStr = 'char-';\n        baseStr += place + this.isPlayer * TeamMaxLength;\n        return baseStr;\n    };\n\n    enableClick = power => {\n        this.characters.forEach(character => {\n            character.enableOnClick(power);\n        });\n    };\n\n    disableClick = () => {\n        this.characters.forEach(character => {\n            character.disableOnClick();\n        });\n        this.unzoomTeam();\n    };\n\n    unzoomTeam = () => {\n        this.characters.forEach(character => {\n            character.unzoomSprite();\n        })\n    }\n\n    readyToAttack = () => {\n        let maxInit = -1;\n        let selected = -1;\n        for (let i = 0; i < this.team.team.length; ++i) {\n            let char = this.team.team[i];\n            if (! char.isDead() && char.getInitiative() > maxInit) {\n                maxInit = char.getInitiative();\n                selected = i;\n            }\n        }\n        if (selected !== -1) {\n            this.characters[selected].zoomSprite();\n        }\n    }\n\n    render() {\n        return (\n            <Row data-testid='team-display'>\n                <CharacterDisplay\n                    id={this.characterId(0)}\n                    ref={child => this.characters.push(child)}\n                    character={this.team.team[0]}\n                />\n                <CharacterDisplay\n                    id={this.characterId(1)}\n                    ref={child => this.characters.push(child)}\n                    character={this.team.team[1]}\n                />\n                <CharacterDisplay\n                    id={this.characterId(2)}\n                    ref={child => this.characters.push(child)}\n                    character={this.team.team[2]}\n                />\n                <CharacterDisplay\n                    id={this.characterId(3)}\n                    ref={child => this.characters.push(child)}\n                    character={this.team.team[3]}\n                />\n            </Row>\n        );\n    }\n}\n\nexport default TeamDisplay;\n","import React from 'react';\nimport { Collapse, Button } from 'react-bootstrap';\n\nclass BattleLogs extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            open: false\n        };\n    }\n\n    appendText(content) {\n        let element = document.getElementById('collapse-text');\n        let text = document.createElement('p');\n        text.innerHTML = content;\n        text.appendChild(document.createElement('br'));\n        element.appendChild(text);\n    }\n\n    render() {\n        const { open } = this.state;\n        return (\n            <div>\n                <Button onClick={() => this.setState({ open: !open })} aria-controls='collapse-text' aria-axpend={open}>\n                    {' '}\n                    Click to expand the battle log\n                </Button>\n                <Collapse in={this.state.open}>\n                    <div id='collapse-text'>\n                        <p>Battle has begun!</p> <br />\n                    </div>\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default BattleLogs;\n","import React from 'react';\nimport { Button, Jumbotron } from 'react-bootstrap';\nimport '../css/VictoryDisplay.css'\n\nclass VictoryDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            winner: props.winner\n        };\n    }\n\n    reloadGame = () => {\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <Jumbotron className=\"victory-style\">\n                <p className=\"victory-header\">Game over</p>\n                <br />\n                <p className=\"winner-text\">{this.state.winner} won</p>\n                <hr/>\n                <Button variant=\"secondary\" onClick={this.reloadGame}>Replay ?</Button>\n            </Jumbotron>\n        );\n    }\n}\n\nexport default VictoryDisplay;\n","import React from 'react';\nimport '../css/Prompt.css';\n\nclass Prompt extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: 'Please click on a character'\n        };\n    }\n\n    updateText = message => {\n        this.setState({\n            text: message\n        });\n    };\n\n    render() {\n        return (\n            <div className='prompt-style'>\n                <p>{this.state.text}</p>\n            </div>\n        );\n    }\n}\n\nexport default Prompt;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport TeamDisplay from './TeamDisplay';\nimport BattleLogs from './BattleLogs';\nimport VictoryDisplay from './VictoryDisplay';\nimport Prompt from './Prompt';\nimport { randomTeamGenerator, getRandomInteger } from '../game/generators/Generator';\nimport sleep from './Sleep';\nimport '../css/Board.css';\n\nconst LimitInitiative = 1000;\nconst WaitingTime = 3000;\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.cpuTeam = randomTeamGenerator();\n        this.userTeam = randomTeamGenerator();\n        this.currentCharacter = null;\n    }\n\n    checkVictory = () => {\n        let cpuCount = this.cpuTeam.getNbAlive();\n        let userCount = this.userTeam.getNbAlive();\n        if (cpuCount === 0 || userCount === 0) {\n            const div = document.getElementById('board');\n            div.innerHTML = '';\n            if (this.playerWon()) {\n                ReactDOM.render(<VictoryDisplay winner='user' />, div);\n            } else {\n                ReactDOM.render(<VictoryDisplay winner='cpu' />, div);\n            }\n        }\n    };\n\n    isGameOver = () => {\n        let cpuCount = this.cpuTeam.getNbAlive();\n        let userCount = this.userTeam.getNbAlive();\n        return cpuCount === 0 || userCount === 0;\n    };\n\n    playerWon = () => {\n        let cpuCount = this.cpuTeam.getNbAlive();\n        return cpuCount === 0;\n    };\n\n    increaseAllInitiative = () => {\n        while (!this.atLeastOneCanPlay()) {\n            this.cpuTeam.increaseAllInitiative();\n            this.userTeam.increaseAllInitiative();\n        }\n        this.currentCharacter = this.getNextToATtack();\n        this.refreshTeams();\n    };\n\n    computerAttack = (target, power) => {\n        this.userTeam.team[target].block(power);\n        this.refreshTeams();\n    };\n\n    refreshTeams = () => {\n        this.cpuTeamRender.refreshAllCharacters();\n        this.userTeamRender.refreshAllCharacters();\n    };\n\n    atLeastOneCanPlay = () => {\n        const cpu = this.cpuTeam.getNextToAttack().getInitiative();\n        const player = this.userTeam.getNextToAttack().getInitiative();\n        return cpu >= LimitInitiative || player >= LimitInitiative;\n    };\n\n    getNextToATtack = () => {\n        const cpu = this.cpuTeam.getNextToAttack().getInitiative();\n        const player = this.userTeam.getNextToAttack().getInitiative();\n        if (player > cpu) {\n            this.userTeamRender.readyToAttack();\n            return this.userTeam.getNextToAttack();\n        }\n        this.cpuTeamRender.readyToAttack();\n        return this.cpuTeam.getNextToAttack();\n    };\n\n    isPlayerTurn = () => {\n        const cpu = this.cpuTeam.getNextToAttack().getInitiative();\n        const player = this.userTeam.getNextToAttack().getInitiative();\n        return cpu < player;\n    };\n\n    changePrompt = message => {\n        this.prompt.updateText(message);\n    };\n\n    allowUserPlay = () => {\n        let power = this.currentCharacter.getPower();\n        this.currentCharacter.resetInitiative();\n        this.changePrompt('User turn: Power -> ' + power);\n        this.cpuTeamRender.enableClick(power);\n    };\n\n    allowCpuPlay = () => {\n        let power = this.currentCharacter.getPower();\n        this.currentCharacter.resetInitiative();\n        this.changePrompt('Cpu turn: Power -> ' + power);\n        this.userTeamRender.enableClick(power);\n        this.cpuMakeChoice();\n    };\n\n    getAliveTarget = () => {\n        let targets = [];\n        for (let i = 0; i < this.userTeam.team.length; ++i) {\n            if (!this.userTeam.team[i].isDead()) {\n                targets.push(i);\n            }\n        }\n        return targets;\n    };\n\n    cpuMakeChoice = async () => {\n        const targets = this.getAliveTarget();\n        const choice = getRandomInteger(0, targets.length);\n        const target = targets[choice];\n        const element = document.getElementById('char-' + (target + 4));\n        let attackText = 'Cpu attacked: ' + target + ' with a power of ' + this.currentCharacter.getPower();\n        window.logs.appendText(attackText);\n        this.changePrompt(attackText);\n        await sleep(WaitingTime);\n        element.click();\n    };\n\n    blockPlayers = () => {\n        this.userTeamRender.disableClick();\n        this.cpuTeamRender.disableClick();\n    };\n\n    render() {\n        return (\n            <div id='board' onClick={this.checkVictory}>\n                <Container fluid >\n                    <Row>\n                        <Col xs={2} fluid>\n                            <BattleLogs ref={child => (window.logs = child)}/>\n                        </Col>\n                        <Col xs={10}>\n                            <Container className='board-style'>\n                                <TeamDisplay\n                                    ref={child => (this.cpuTeamRender = child)}\n                                    team={this.cpuTeam}\n                                    isPlayer={false}\n                                />\n                                <br />\n                                <TeamDisplay\n                                    ref={child => (this.userTeamRender = child)}\n                                    team={this.userTeam}\n                                    isPlayer={true}\n                                />\n                            </Container>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Prompt ref={child => (this.prompt = child)} />\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './display/Board';\n\nclass GameScript {\n    startGame = () => {\n        window.gameScript = this;\n        this.renderElements();\n        this.playTurn();\n    };\n\n    playTurn = async () => {\n        if (! await this.board.isGameOver()) {\n            this.board.blockPlayers();\n            this.board.increaseAllInitiative();\n            if (this.board.isPlayerTurn()) {\n                this.userTurn();\n            } else {\n                this.computerTurn();\n            }\n        }\n    };\n\n    userTurn = () => {\n        this.board.allowUserPlay();\n    };\n\n    computerTurn = () => {\n        this.board.changePrompt('Computer turn');\n        this.board.allowCpuPlay();\n    };\n\n    renderElements = () => {\n        ReactDOM.render(\n            <Board\n                ref={element => {\n                    window.gameBoard = element;\n                }}\n            />,\n            document.getElementById('board-div')\n        );\n        this.board = window.gameBoard;\n    };\n}\n\nexport default GameScript;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GameScript from './gameScript';\nimport * as serviceWorker from './serviceWorker';\nimport './css/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nlet game = new GameScript();\ngame.startGame();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}